/* tslint:disable */
/* eslint-disable */
/**
 * Mossem API
 * REST API for Mossem
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    refreshToken?: string;
}
/**
 * 
 * @export
 * @interface DanceDto
 */
export interface DanceDto {
    /**
     * 
     * @type {string}
     * @memberof DanceDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DanceDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof DanceDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DanceDto
     */
    description: string;
}
/**
 * 
 * @export
 * @interface EquipmentDto
 */
export interface EquipmentDto {
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    dateaquired: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    quantity: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentDto
     */
    status: string;
}
/**
 * 
 * @export
 * @interface InstrumentDto
 */
export interface InstrumentDto {
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    dateaquired: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    quantity: string;
    /**
     * 
     * @type {string}
     * @memberof InstrumentDto
     */
    status: string;
}
/**
 * 
 * @export
 * @interface PictureDto
 */
export interface PictureDto {
    /**
     * 
     * @type {string}
     * @memberof PictureDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PictureDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof PictureDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PictureDto
     */
    description: string;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    refresh_token: string;
}
/**
 * 
 * @export
 * @interface RegisterUserDto
 */
export interface RegisterUserDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    fullName: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface SongDto
 */
export interface SongDto {
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    songwriter: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    performedplaces: string;
    /**
     * 
     * @type {string}
     * @memberof SongDto
     */
    datecreated: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    fullName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    userType: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        about: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new dance
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDance: async (danceDto: DanceDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'danceDto' is not null or undefined
            assertParamExists('addDance', 'danceDto', danceDto)
            const localVarPath = `/dance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(danceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new equipment
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEquipment: async (equipmentDto: EquipmentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'equipmentDto' is not null or undefined
            assertParamExists('addEquipment', 'equipmentDto', equipmentDto)
            const localVarPath = `/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new instrument
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstrument: async (instrumentDto: InstrumentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'instrumentDto' is not null or undefined
            assertParamExists('addInstrument', 'instrumentDto', instrumentDto)
            const localVarPath = `/instrument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(instrumentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new picture
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPicture: async (pictureDto: PictureDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pictureDto' is not null or undefined
            assertParamExists('addPicture', 'pictureDto', pictureDto)
            const localVarPath = `/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new song
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSong: async (songDto: SongDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'songDto' is not null or undefined
            assertParamExists('addSong', 'songDto', songDto)
            const localVarPath = `/song`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(songDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDance', 'id', id)
            const localVarPath = `/dance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEquipment', 'id', id)
            const localVarPath = `/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstrument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInstrument', 'id', id)
            const localVarPath = `/instrument/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePicture', 'id', id)
            const localVarPath = `/picture/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSong: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSong', 'id', id)
            const localVarPath = `/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDance: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDance', 'id', id)
            const localVarPath = `/dance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of all dance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDances: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/dance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEquipment', 'id', id)
            const localVarPath = `/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of all equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstrument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInstrument', 'id', id)
            const localVarPath = `/instrument/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of all instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstruments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/instrument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPicture: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPicture', 'id', id)
            const localVarPath = `/picture/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of all picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictures: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/picture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSong: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSong', 'id', id)
            const localVarPath = `/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of all song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSongs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/song`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerUserDto: RegisterUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserDto' is not null or undefined
            assertParamExists('register', 'registerUserDto', registerUserDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update dance
         * @param {string} id 
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDance: async (id: string, danceDto: DanceDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDance', 'id', id)
            // verify required parameter 'danceDto' is not null or undefined
            assertParamExists('updateDance', 'danceDto', danceDto)
            const localVarPath = `/dance/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(danceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update equipment
         * @param {string} id 
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment: async (id: string, equipmentDto: EquipmentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEquipment', 'id', id)
            // verify required parameter 'equipmentDto' is not null or undefined
            assertParamExists('updateEquipment', 'equipmentDto', equipmentDto)
            const localVarPath = `/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(equipmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update instrument
         * @param {string} id 
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstrument: async (id: string, instrumentDto: InstrumentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateInstrument', 'id', id)
            // verify required parameter 'instrumentDto' is not null or undefined
            assertParamExists('updateInstrument', 'instrumentDto', instrumentDto)
            const localVarPath = `/instrument/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(instrumentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update picture
         * @param {string} id 
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePicture: async (id: string, pictureDto: PictureDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePicture', 'id', id)
            // verify required parameter 'pictureDto' is not null or undefined
            assertParamExists('updatePicture', 'pictureDto', pictureDto)
            const localVarPath = `/picture/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pictureDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update song
         * @param {string} id 
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSong: async (id: string, songDto: SongDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSong', 'id', id)
            // verify required parameter 'songDto' is not null or undefined
            assertParamExists('updateSong', 'songDto', songDto)
            const localVarPath = `/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(songDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async about(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.about(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new dance
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDance(danceDto: DanceDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDance(danceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new equipment
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEquipment(equipmentDto: EquipmentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEquipment(equipmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new instrument
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInstrument(instrumentDto: InstrumentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstrumentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInstrument(instrumentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new picture
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPicture(pictureDto: PictureDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PictureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPicture(pictureDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new song
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSong(songDto: SongDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSong(songDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquipment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquipment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInstrument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstrumentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstrument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePicture(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PictureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePicture(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSong(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSong(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDance(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DanceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of all dance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDances(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DanceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of all equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EquipmentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstrument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstrumentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstrument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of all instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstruments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstrumentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstruments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPicture(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PictureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPicture(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of all picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPictures(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PictureDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPictures(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSong(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSong(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of all song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSongs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SongDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSongs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerUserDto: RegisterUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update dance
         * @param {string} id 
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDance(id: string, danceDto: DanceDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDance(id, danceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update equipment
         * @param {string} id 
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquipment(id: string, equipmentDto: EquipmentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquipment(id, equipmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update instrument
         * @param {string} id 
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstrument(id: string, instrumentDto: InstrumentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstrument(id, instrumentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update picture
         * @param {string} id 
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePicture(id: string, pictureDto: PictureDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePicture(id, pictureDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update song
         * @param {string} id 
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSong(id: string, songDto: SongDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSong(id, songDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        about(options?: any): AxiosPromise<void> {
            return localVarFp.about(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new dance
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDance(danceDto: DanceDto, options?: any): AxiosPromise<DanceDto> {
            return localVarFp.addDance(danceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new equipment
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEquipment(equipmentDto: EquipmentDto, options?: any): AxiosPromise<EquipmentDto> {
            return localVarFp.addEquipment(equipmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new instrument
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInstrument(instrumentDto: InstrumentDto, options?: any): AxiosPromise<InstrumentDto> {
            return localVarFp.addInstrument(instrumentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new picture
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPicture(pictureDto: PictureDto, options?: any): AxiosPromise<PictureDto> {
            return localVarFp.addPicture(pictureDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new song
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSong(songDto: SongDto, options?: any): AxiosPromise<SongDto> {
            return localVarFp.addSong(songDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDance(id: string, options?: any): AxiosPromise<DanceDto> {
            return localVarFp.deleteDance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquipment(id: string, options?: any): AxiosPromise<EquipmentDto> {
            return localVarFp.deleteEquipment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstrument(id: string, options?: any): AxiosPromise<InstrumentDto> {
            return localVarFp.deleteInstrument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePicture(id: string, options?: any): AxiosPromise<PictureDto> {
            return localVarFp.deletePicture(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSong(id: string, options?: any): AxiosPromise<SongDto> {
            return localVarFp.deleteSong(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of dance with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDance(id: string, options?: any): AxiosPromise<DanceDto> {
            return localVarFp.getDance(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of all dance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDances(options?: any): AxiosPromise<Array<DanceDto>> {
            return localVarFp.getDances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of equipment with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipment(id: string, options?: any): AxiosPromise<EquipmentDto> {
            return localVarFp.getEquipment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of all equipment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipments(options?: any): AxiosPromise<Array<EquipmentDto>> {
            return localVarFp.getEquipments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of instrument with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstrument(id: string, options?: any): AxiosPromise<InstrumentDto> {
            return localVarFp.getInstrument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of all instrument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstruments(options?: any): AxiosPromise<Array<InstrumentDto>> {
            return localVarFp.getInstruments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of picture with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPicture(id: string, options?: any): AxiosPromise<PictureDto> {
            return localVarFp.getPicture(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of all picture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPictures(options?: any): AxiosPromise<Array<PictureDto>> {
            return localVarFp.getPictures(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of song with id {id}
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSong(id: string, options?: any): AxiosPromise<SongDto> {
            return localVarFp.getSong(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of all song
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSongs(options?: any): AxiosPromise<Array<SongDto>> {
            return localVarFp.getSongs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerUserDto: RegisterUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.register(registerUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update dance
         * @param {string} id 
         * @param {DanceDto} danceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDance(id: string, danceDto: DanceDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateDance(id, danceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update equipment
         * @param {string} id 
         * @param {EquipmentDto} equipmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquipment(id: string, equipmentDto: EquipmentDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateEquipment(id, equipmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update instrument
         * @param {string} id 
         * @param {InstrumentDto} instrumentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstrument(id: string, instrumentDto: InstrumentDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateInstrument(id, instrumentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update picture
         * @param {string} id 
         * @param {PictureDto} pictureDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePicture(id: string, pictureDto: PictureDto, options?: any): AxiosPromise<void> {
            return localVarFp.updatePicture(id, pictureDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update song
         * @param {string} id 
         * @param {SongDto} songDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSong(id: string, songDto: SongDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateSong(id, songDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary About this REST API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public about(options?: any) {
        return DefaultApiFp(this.configuration).about(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new dance
     * @param {DanceDto} danceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addDance(danceDto: DanceDto, options?: any) {
        return DefaultApiFp(this.configuration).addDance(danceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new equipment
     * @param {EquipmentDto} equipmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addEquipment(equipmentDto: EquipmentDto, options?: any) {
        return DefaultApiFp(this.configuration).addEquipment(equipmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new instrument
     * @param {InstrumentDto} instrumentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addInstrument(instrumentDto: InstrumentDto, options?: any) {
        return DefaultApiFp(this.configuration).addInstrument(instrumentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new picture
     * @param {PictureDto} pictureDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPicture(pictureDto: PictureDto, options?: any) {
        return DefaultApiFp(this.configuration).addPicture(pictureDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new song
     * @param {SongDto} songDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSong(songDto: SongDto, options?: any) {
        return DefaultApiFp(this.configuration).addSong(songDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete dance with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteDance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete equipment with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEquipment(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteEquipment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete instrument with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteInstrument(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteInstrument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete picture with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePicture(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deletePicture(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete song with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSong(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSong(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of dance with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getDance(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of all dance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDances(options?: any) {
        return DefaultApiFp(this.configuration).getDances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of equipment with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEquipment(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getEquipment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of all equipment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEquipments(options?: any) {
        return DefaultApiFp(this.configuration).getEquipments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of instrument with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstrument(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstrument(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of all instrument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstruments(options?: any) {
        return DefaultApiFp(this.configuration).getInstruments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of picture with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPicture(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getPicture(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of all picture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPictures(options?: any) {
        return DefaultApiFp(this.configuration).getPictures(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: any) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of song with id {id}
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSong(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getSong(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of all song
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSongs(options?: any) {
        return DefaultApiFp(this.configuration).getSongs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: any) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: any) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: any) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new user
     * @param {RegisterUserDto} registerUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(registerUserDto: RegisterUserDto, options?: any) {
        return DefaultApiFp(this.configuration).register(registerUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update dance
     * @param {string} id 
     * @param {DanceDto} danceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDance(id: string, danceDto: DanceDto, options?: any) {
        return DefaultApiFp(this.configuration).updateDance(id, danceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update equipment
     * @param {string} id 
     * @param {EquipmentDto} equipmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEquipment(id: string, equipmentDto: EquipmentDto, options?: any) {
        return DefaultApiFp(this.configuration).updateEquipment(id, equipmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update instrument
     * @param {string} id 
     * @param {InstrumentDto} instrumentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInstrument(id: string, instrumentDto: InstrumentDto, options?: any) {
        return DefaultApiFp(this.configuration).updateInstrument(id, instrumentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update picture
     * @param {string} id 
     * @param {PictureDto} pictureDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePicture(id: string, pictureDto: PictureDto, options?: any) {
        return DefaultApiFp(this.configuration).updatePicture(id, pictureDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update song
     * @param {string} id 
     * @param {SongDto} songDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSong(id: string, songDto: SongDto, options?: any) {
        return DefaultApiFp(this.configuration).updateSong(id, songDto, options).then((request) => request(this.axios, this.basePath));
    }
}


